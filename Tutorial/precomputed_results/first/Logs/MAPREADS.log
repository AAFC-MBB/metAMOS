Settings:
  Output files: "/Users/treangen/dev/metAMOS/Tutorial/first/Assemble/out/IDX.*.ebwt"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 2 (one in 4)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  /Users/treangen/dev/metAMOS/Tutorial/first/Assemble/out/proba.asm.contig
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 44940
Using parameters --bmax 33705 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 33705 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 25679.1 (target: 33704)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 7
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25950
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25951
Getting block 2 of 7
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 33590
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 33591
Getting block 3 of 7
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 30090
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 30091
Getting block 4 of 7
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 19833
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 19834
Getting block 5 of 7
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 23371
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 23372
Getting block 6 of 7
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 29158
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 29159
Getting block 7 of 7
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 17762
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 17763
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 74872
fchr[G]: 90151
fchr[T]: 104431
fchr[$]: 179760
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4246592 bytes to primary EBWT file: /Users/treangen/dev/metAMOS/Tutorial/first/Assemble/out/IDX.1.ebwt
Wrote 179768 bytes to secondary EBWT file: /Users/treangen/dev/metAMOS/Tutorial/first/Assemble/out/IDX.2.ebwt
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 179760
    bwtLen: 179761
    sz: 44940
    bwtSz: 44941
    lineRate: 6
    linesPerSide: 1
    offRate: 2
    offMask: 0xfffffffc
    isaRate: -1
    isaMask: 0xffffffff
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 44941
    offsSz: 179764
    isaLen: 0
    isaSz: 0
    lineSz: 64
    sideSz: 64
    sideBwtSz: 56
    sideBwtLen: 224
    numSidePairs: 402
    numSides: 804
    numLines: 804
    ebwtTotLen: 51456
    ebwtTotSz: 51456
    reverse: 0
Total time for call to driver() for forward index: 00:00:00
Reading reference sizes
  Time reading reference sizes: 00:00:00
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:00
bmax according to bmaxDivN setting: 44940
Using parameters --bmax 33705 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 33705 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:00
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:00
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:00
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Split 1, merged 6; iterating...
  Binary sorting into buckets
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Binary sorting into buckets time: 00:00:00
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 22469.1 (target: 33704)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25475
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25476
Getting block 2 of 8
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 13231
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 13232
Getting block 3 of 8
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 30015
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 30016
Getting block 4 of 8
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 31692
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 31693
Getting block 5 of 8
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 29447
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 29448
Getting block 6 of 8
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 12530
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12531
Getting block 7 of 8
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 25251
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 25252
Getting block 8 of 8
  Reserving size (33705) for bucket
  Calculating Z arrays
  Calculating Z arrays time: 00:00:00
  Entering block accumulator loop:
  10%
  20%
  30%
  40%
  50%
  60%
  70%
  80%
  90%
  100%
  Block accumulator loop time: 00:00:00
  Sorting block of length 12112
  (Using difference cover)
  Sorting block time: 00:00:00
Returning block of 12113
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 74872
fchr[G]: 90151
fchr[T]: 104431
fchr[$]: 179760
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 4246592 bytes to primary EBWT file: /Users/treangen/dev/metAMOS/Tutorial/first/Assemble/out/IDX.rev.1.ebwt
Wrote 179768 bytes to secondary EBWT file: /Users/treangen/dev/metAMOS/Tutorial/first/Assemble/out/IDX.rev.2.ebwt
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 179760
    bwtLen: 179761
    sz: 44940
    bwtSz: 44941
    lineRate: 6
    linesPerSide: 1
    offRate: 2
    offMask: 0xfffffffc
    isaRate: -1
    isaMask: 0xffffffff
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 44941
    offsSz: 179764
    isaLen: 0
    isaSz: 0
    lineSz: 64
    sideSz: 64
    sideBwtSz: 56
    sideBwtLen: 224
    numSidePairs: 402
    numSides: 804
    numLines: 804
    ebwtTotLen: 51456
    ebwtTotSz: 51456
    reverse: 0
Total time for backward call to driver() for mirror index: 00:00:00
# reads processed: 269350
# reads with at least one reported alignment: 124072 (46.06%)
# reads that failed to align: 143535 (53.29%)
# reads with alignments suppressed due to -m: 1743 (0.65%)
Reported 124072 alignments to 1 output stream(s)
