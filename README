metAMOS v1.0b README
Last updated: April 26th 2012

NEWS:

*FCP now supported
*Glimmer-MG now supported
*PhymmBL now supported

> SUMMARY
        * A/ HARDWARE REQUIREMENTS
        * B/ SOFTWARE REQUIREMENTS
        * C/ INSTALLING metAMOS
        * D/ QUICK START
        * E/ TEST SUITE
        * F/ EXAMPLE OUTPUT
        * G/ CONTACT
        * H/ CITING

----------------------------------------------------------------------------------
A/ HARDWARE REQUIREMENTS

metAMOS was designed to work on any standard 64bit Linx
environment. To use metAMOS for tutorial/teaching purposes, a minimum
of 8 GB RAM is required. To get started on real data sets a minimum of
32 GB of RAM is recommened, and anywhere from 64-512 GB may be
necessary for larger datasets. In our experience, for most 50-60
million read datasets, 64 GB is a good place to start (68 GB of memory
available on High Memory Instance at Amazon Elastic Compute Cloud ).

----------------------------------------------------------------------------------
B/ SOFTWARE REQUIREMENTS

The main prequisite software is python2.6+ and AMOS (available from
http://amos.sf.net). Once python2.6+ and AMOS are installed, there
should not be any other major prerequisites as most everything that is
needed is distributed with metAMOS inside of the /Utilities
directory. However, there is some software that metAMOS can
incorporate into its pipeline that we are not allowed to distribute,
such as MetaGeneMark. To get a license to use MetaGeneMark, plesae
visit: http://exon.gatech.edu/license_download.cgi.

----------------------------------------------------------------------------------
C/ INSTALLING metAMOS

To download the software, go to https://github.com/treangen/metAMOS
and click on Downloads. Once downloaded, simply unpack the files and
open the metAMOS directory. Once inside the metAMOS directory, run:

python INSTALL.py

This will download and install any external dependencies (or they can
be refused by answering NO), which may take minutes or hours to
download depending on your connection speed.

----------------------------------------------------------------------------------
D/ QUICK START

Before you get started using metAMOS a brief review of its design will
help clarify its intended use. metAMOS gas two main components:

1) initPipeline.py
2) runPipeline.py

The first component, initPipeline.py, is for creating new projects and
also initiliazing sequence libraries. Currently interleaved &
non-interleaved fasta, fastq, and SFF files are supported.

usage info:

(non-interleaved fastq, single library)
initPipeline.py -1 file.fastq.1 -2 file.fastq.2 -d projectDir -i 300:500 -q

(non-interleaved fasta, single library)
initPipeline.py -1 file.fastq.1 -2 file.fastq.2 -d projectDir -i 300:500 -f

(interleaved fastq, single library)
initPipeline.py -m file.fastq.12  -d projectDir -i 300:500 -q

(interleaved fastq, multiple libraries)
initPipeline.py -m file.fastq.12,file2.fastq.12  -d projectDir -i 300:500,1000:2000 -q

(interleaved fastq, multiple libraries, existing assembly)
initPipeline.py -m file.fastq.12,file2.fastq.12 -c file.contig.fa -d projectDir -i 300:500,1000:2000 -q

The second component, runPipeline.py, takes a project directory as
input and runs the following steps by default:

1. Preprocess
2. Assemble
3. FindORFs
4. FindRepeats
5. Abundance
6. Annotate
7. Scaffold
8. Propagate 
9. FindScaffoldORFs
10. Classify 
11. Postprocess

usage info:

usage: runPipeline.py [options] -d projectdir (required)
options:  -a <assembler> -k <kmer size> -f (forcestep) -s (skipstep) -p <num threads>  -v (verbose?) -t (filter reads?)

-h: help?
-r: retain the AMOS bank?  (default = NO)
-m: read mapper to use? (default = bowtie)
-d = <project dir>: directory created by initPipeline
-s = <runPipeline step>: start at this step in the pipeline
-e = <runPipeline step>: end at this step in the pipeline
-o = <int>>: min overlap length
-k = <int>: kmer size for assembly
-c = <classifier>: classifier to use for annotation
-a = <assembler>: genome assembler to use
-n = <runPipeline step>: step to skip in pipeline
-p = <int>: number of threads to use (be greedy!)
-q: produce FastQC quality report for reads with quality information (fastq or sff)? (default = NO)
-t: filter input reads? (default = NO)
-f = <runPipeline step>: force this step to be run
-v: verbose output? (default = NO)
-4: 454 data? (default = NO)
-b: save (bowtie) index? (default = NO)

For example, to enable read filtering:

-t

and to enable meta-IDBA as the assembler:

-a metaidba

And to use PhyloSift to annotate:

-c phylosift

Any single step in the pipeline can be skipped by passing the
following parameter to runPipeline:

-n,--skipsteps=Step1,..

metAMOS reruns steps based on timestamp information, so if the input
files for a step in the pipeline hasn't changed since the last run, it
will be skipped automatically. However, you can forefully run any step
in the pipeline by passing the following parameter to runPipeline:

-f,--force=Step1,..

Upon completion, all of the final results will be stored in the
Postprocess/out directory. A third component, createReport.py, takes
this directory (or multiple Posprocess/out directories) as input and
as output, generates an HTML page with summary statistics and a few
static plots.


----------------------------------------------------------------------------------
E/ Test suite

We have developed a set of scripts for testing the various features of
metAMOS. All of these regression test scripts are available inside the
/Test directory and include all necessary datasets to run them. Here
is a brief listing of the test scripts we currently include:

*Test initPipeline
./Test/test_create.sh

*Vanilla test
./Test/run_test.sh

*Test PhlyoSift
./Test/test_amphora.sh

*Test Minimus
./Test/test_minimus.sh

*Test Preprocess filtration of non-interleaved fastq files
./Test/test_filter_noninterleaved_fastq.s

*Test Newbler (if available)
./Test/test_newbler.sh

*Test CA (fasta)
./Test/test_ca_fasta.sh

*Test CA (fastq)
./Test/test_ca.sh

*Test SOAPdenovo
./Test/test_soap.sh

*Test MetaVelvet
./Test/test_metavelvet.sh

*Test SparseAssembler
./Test/test_sparse.sh

*Test Velvet
./Test/test_velvet.sh

*Test FCP
./Test/test_fcp.sh

..more on the way!

----------------------------------------------------------------------------------
F/ Example output

http://www.cbcb.umd.edu/software/metamos/report.krona.html

Krona publication: Ondov BD, Bergman NH, Phillippy AM.. Interactive
metagenomic visualization in a Web browser. BMC Bioinformatics. 2011
Sep 30;12:385.  PMID: 21961884

Additionally, since metAMOS stores all of its results in an AMOS bank,
the assemblies can be visualized with Hawkeye.

----------------------------------------------------------------------------------
G/ CONTACT

Who to contact to report bugs, forward complaints, feature requests:

Todd Treangen: treangen@gmail.com
Sergey Koren: sergek@umd.edu

----------------------------------------------------------------------------------
H/ CITE

Coming soon!
