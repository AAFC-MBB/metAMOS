{"name":"MetAMOS","tagline":"A metagenomic assembly analysis pipeline","body":"# MetAMOS v1.2 README\r\nLast updated: August 3rd, 2013\r\n\r\n## **MetAMOS single file binary**\r\n\r\nOne of the original goals of the MetAMOS project was to greatly simplify the process of installing multiple software packages, dependencies, etc. In attempt to further simplify the MetAMOS installation process, we are happy to announce the availability of a 'frozen' MetAMOS binary for Linux-x68_64 platforms. Along with this binary comes a significantly reduced list of prerequisites:\r\n\r\n* Java 1.5 (or newer)\r\n* Perl 5.8.8 (or newer)\r\n* 64-bit *nix OS\r\n\r\nYou can download a frozen binary with all BLAST DBs [here](ftp://ftp.cbcb.umd.edu/pub/data/treangen/metAMOS_binary.tar.gz)\r\n\r\n*Note: this is a big file to download and will take awhile to finish (~13GB compressed, 27GB unzipped)\r\n\r\nAlternatively, you can download a frozen binary with NO BLAST DBs [here](ftp://ftp.cbcb.umd.edu/pub/data/treangen/metAMOS_binary_noblastdbs.tar.gz)\r\n\r\n*Note: this is fairly big file, ~1.9GB compressed, 4GB unzipped\r\n\r\nThe revised installation procedure is simply:\r\n\r\n1. Download tarball\r\n2. Extract\r\n3. Run a test script or two\r\n4. have fun!\r\n\r\nMac OSX equivalent will be appearing [here](ftp.cbcb.umd.edu/pub/data/treangen/metAMOS_binary_noblastdbs_osx.tar.gz)  soon, stay tuned!\r\n\r\n## NEWS:\r\n\r\n1. 64-bit frozen Linux binary now available\r\n2. Started migration to new HTML5 plots in HTML report\r\n3. Numerous bux fixes\r\n\r\n## SUMMARY\r\n        * A) HARDWARE REQUIREMENTS\r\n        * B) SOFTWARE REQUIREMENTS\r\n        * C) INSTALLING MetAMOS\r\n        * D) QUICK START\r\n        * E) TEST SUITE\r\n        * F) EXAMPLE OUTPUT\r\n        * G) CONTACT\r\n        * H) CITING\r\n\r\n----------------------------------------------------------------------------------\r\n### A) HARDWARE REQUIREMENTS\r\n\r\nMetAMOS was designed to work on any standard 64bit Linx\r\nenvironment. To use MetAMOS for tutorial/teaching purposes, a minimum\r\nof 8 GB RAM is required. To get started on real data sets a minimum of\r\n32 GB of RAM is recommened, and anywhere from 64-512 GB may be\r\nnecessary for larger datasets. In our experience, for most 50-100\r\nmillion read datasets, 64 GB is a good place to start (128 GB of memory\r\navailable on High Memory Instance at Amazon Elastic Compute Cloud ).\r\n\r\n----------------------------------------------------------------------------------\r\n### B) SOFTWARE REQUIREMENTS\r\n\r\nThe main prequisite software is python2.6+ and AMOS (available from\r\nhttp://amos.sf.net). Once python2.6+ and AMOS are installed, there\r\nshould not be any other major prerequisites as most everything that is\r\nneeded is distributed with MetAMOS inside of the /Utilities\r\ndirectory. Depending on your platform/Linux distribution, you might need to download and install the following BEFORE running INSTALL.py:\r\n\r\n1) git\r\n2) wget\r\n3) gcc\r\n4) automake\r\n5) python-tools\r\n6) python-devel\r\n7) zlib-devel\r\n8) numpy\r\n9) freetype, freetype-devel\r\n10) libpng-devel\r\n\r\nAdditionally, there is some software that MetAMOS can\r\nincorporate into its pipeline that we are not allowed to distribute,\r\nsuch as MetaGeneMark. To get a license to use MetaGeneMark, plesae\r\nvisit: http://exon.gatech.edu/license_download.cgi.\r\n\r\n----------------------------------------------------------------------------------\r\n### C) INSTALLING MetAMOS\r\n\r\nTo download the software, go to https://github.com/treangen/MetAMOS\r\nand click on Downloads. Once downloaded, simply unpack the files and\r\nopen the MetAMOS directory. Once inside the MetAMOS directory, run:\r\n\r\npython INSTALL.py\r\n\r\nThis will download and install any external dependencies (or they can\r\nbe refused by answering NO), which may take minutes or hours to\r\ndownload depending on your connection speed. If all dependencies are\r\ndownloaded (including optional ones), this will take quite awhile to\r\ncomplete (plan on a few hours to 2 days).\r\n\r\n----------------------------------------------------------------------------------\r\n### D) QUICK START\r\n\r\nBefore you get started using MetAMOS a brief review of its design will\r\nhelp clarify its intended use. MetAMOS gas two main components:\r\n\r\n1) initPipeline\r\n2) runPipeline\r\n\r\nThe first component, initPipeline, is for creating new projects and\r\nalso initiliazing sequence libraries. Currently interleaved &\r\nnon-interleaved fasta, fastq, and SFF files are supported. The file-type flags (-f, -q, and -s)\r\nmust be specified before the file. Once specified, they remain in effect\r\nuntil a different file type is specified.\r\n\r\nusage: initPipeline -f/-q -1 file.fastq.1 -2 file.fastq.2 -d projectDir -i 300:500 \r\noptions: -s -c -q, -f, -1, -2, -d, -m, -i\r\n-1: either non-paired file of reads or first file in pair, can be list of multiple separated by a comma\r\n-2: second paired read file, can be list of multiple separated by a comma\r\n-c:  fasta file containing contigs\r\n-d: output project directory (required)\r\n-f: boolean, reads are in fasta format (default is fastq)\r\n-h: display help message\r\n-i: insert size of library, can be list separated by commas for multiple libraries\r\n-l: SFF linker type\r\n-m: interleaved file of paired reads\r\n-o: reads are in outtie orientation (default innie)\r\n-q: boolean, reads are in fastq format (default is fastq)\r\n-s/--sff: boolean, reads are in SFF format (default is fastq)\r\n\r\nFor example, to input a:\r\n(non-interleaved fastq, single library)\r\ninitPipeline -q -1 file.fastq.1 -2 file.fastq.2 -d projectDir -i 300:500\r\n\r\n(non-interleaved fasta, single library)\r\ninitPipeline -f -1 file.fastq.1 -2 file.fastq.2 -d projectDir -i 300:500\r\n\r\n(interleaved fastq, single library)\r\ninitPipeline -q -m file.fastq.12  -d projectDir -i 300:500\r\n\r\n(interleaved fastq, multiple libraries)\r\ninitPipeline -q -m file.fastq.12,file2.fastq.12  -d projectDir -i 300:500,1000:2000\r\n\r\n(interleaved fastq, multiple libraries, existing assembly)\r\ninitPipeline -q -m file.fastq.12,file2.fastq.12 -c file.contig.fa -d projectDir -i 300:500,1000:2000\r\n\r\nThe second component, runPipeline, takes a project directory as\r\ninput and runs the following steps by default:\r\n\r\n1. Preprocess\r\n2. Assemble\r\n3. FindORFs\r\n4. FindRepeats\r\n5. Abundance\r\n6. Annotate\r\n7. FunctionalAnnotation\r\n8. Scaffold\r\n9. Propagate \r\n10. FindScaffoldORFs\r\n11. Classify \r\n12. Postprocess\r\n\r\nusage info:\r\n\r\nusage: runPipeline [options] -d projectdir\r\n   -h = <bool>:   print help [this message]\r\n   -j = <bool>:   just output all of the programs and citations then exit (default = NO)\r\n   -v = <bool>:   verbose output? (default = NO)\r\n   -d = <string>: directory created by initPipeline (REQUIRED)\r\n\r\n[options]: [pipeline_opts] [misc_opts]\r\n\r\n[pipeline_opts]: options that affect the pipeline execution\r\nPipeline consists of the following steps:\r\n  Preprocess, Assemble, FindORFS, MapReads, Abundance, Annotate,\r\n  Scaffold, Propagate, Classify, Postprocess\r\nEach of these steps can be referred to by the following options:\r\n   -f = <string>: force this step to be run (default = NONE)\r\n   -s = <string>: start at this step in the pipeline (default = Preprocess)\r\n   -e = <string>: end at this step in the pipeline (default = Postprocess)\r\n   -n = <string>: step to skip in pipeline (default=NONE)\r\n\r\nFor each step you can fine-tune the execution as follows\r\n[Preprocess]\r\n   -t = <bool>:   filter input reads? (default = NO)\r\n   -q = <bool>:   produce FastQC quality report for reads with quality information (fastq or sff)? (default = NO)\r\n[Assemble]\r\n   -a = <string>: genome assembler to use (default = SOAPdenovo)\r\n   -k = <kmer size>: k-mer size to be used for assembly (default = 31)\r\n   -o = <int>:    min overlap length\r\n[MapReads]\r\n   -m = <string>: read mapper to use? (default = bowtie)\r\n   -i = <bool>:   save bowtie (i)ndex? (default = NO)\r\n   -b = <bool>:   create library specific per bp coverage of assembled contigs (default = NO)\r\n[FindORFS]\r\n   -g = <string>: gene caller to use (default=FragGeneScan)\r\n   -l = <int>:    min contig length to use for ORF call (default = 300)\r\n   -x = <int>:    min contig coverage to use for ORF call (default = 3X)\r\n[Annotate]\r\n   -c = <string>: classifier to use for annotation (default = FCP)\r\n   -u = <bool>:   annotate unassembled reads? (default = NO)\r\n[Classify]\r\n   -z = <string>: taxonomic level to categorize at (default = class)\r\n\r\n[misc_opts]: Miscellaneous options\r\n   -r = <bool>:   retain the AMOS bank?  (default = NO)\r\n   -p = <int>:    number of threads to use (be greedy!) (default=1)\r\n   -4 = <bool>:   454 data? (default = NO)\r\n\r\nFor example, to enable read filtering:\r\n\r\n-t\r\n\r\nand to enable meta-IDBA as the assembler:\r\n\r\n-a metaidba\r\n\r\nAnd to use PhyloSift to annotate:\r\n\r\n-c phylosift\r\n\r\nAny single step in the pipeline can be skipped by passing the\r\nfollowing parameter to runPipeline:\r\n\r\n-n,--skipsteps=Step1,..\r\n\r\nMetAMOS reruns steps based on timestamp information, so if the input\r\nfiles for a step in the pipeline hasn't changed since the last run, it\r\nwill be skipped automatically. However, you can forefully run any step\r\nin the pipeline by passing the following parameter to runPipeline:\r\n\r\n-f,--force=Step1,..\r\n\r\nMetAMOS stores a summary of the input libraries in pipeline.ini \r\nin the working directory. The pipeline.conf file stores the list \r\nof programs available to MetAMOS. Finally, pipeline.run stores the \r\nselected parameters and programs for the current run. MetAMOS also stores \r\ndetailed logs of all commands executed by the pipeline in Logs/COMMANDS.log \r\nand a log for each step of the pipeline in Logs/<STEP NAME>.log\r\n\r\nUpon completion, all of the final results will be stored in the\r\nPostprocess/out directory. A component, create_summary.py, takes\r\nthis directory as input and as output, generates an HTML page with\r\nwith summary statistics and a few plots. An optional component, create_plots.py,\r\ntakes one or multiple Posprocess/out directories as input and generates\r\ncomparative plots.\r\n\r\n\r\n----------------------------------------------------------------------------------\r\n### E) Test suite\r\n\r\nWe have developed a set of scripts for testing the various features of\r\nMetAMOS. All of these regression test scripts are available inside the\r\n/Test directory and include all necessary datasets to run them. Here\r\nis a brief listing of the test scripts we currently include:\r\n\r\n*Test initPipeline\r\n./Test/test_create.sh\r\n\r\n*Vanilla test\r\n./Test/run_test.sh\r\n\r\n*Test PhlyoSift\r\n./Test/test_amphora.sh\r\n\r\n*Test Minimus\r\n./Test/test_minimus.sh\r\n\r\n*Test Preprocess filtration of non-interleaved fastq files\r\n./Test/test_filter_noninterleaved_fastq.s\r\n\r\n*Test Newbler (if available)\r\n./Test/test_newbler.sh\r\n\r\n*Test CA (fasta)\r\n./Test/test_ca_fasta.sh\r\n\r\n*Test CA (fastq)\r\n./Test/test_ca.sh\r\n\r\n*Test SOAPdenovo\r\n./Test/test_soap.sh\r\n\r\n*Test MetaVelvet\r\n./Test/test_metavelvet.sh\r\n\r\n*Test SparseAssembler\r\n./Test/test_sparse.sh\r\n\r\n*Test Velvet\r\n./Test/test_velvet.sh\r\n\r\n*Test FCP\r\n./Test/test_fcp.sh\r\n\r\n..more on the way!\r\n\r\n----------------------------------------------------------------------------------\r\n### F) Example output\r\n\r\nMetAMOS generates an interactive webpage once a run successfully completes:\r\nhttp://www.cbcb.umd.edu/software/metamos/summary.html\r\n\r\nThis includes summary statistics and taxonomic information based on Krona\r\nKrona publication: Ondov BD, Bergman NH, Phillippy AM.. Interactive\r\nmetagenomic visualization in a Web browser. BMC Bioinformatics. 2011\r\nSep 30;12:385.  PMID: 21961884\r\n\r\nAdditionally, since MetAMOS stores all of its results in an AMOS bank,\r\nthe assemblies can be visualized with Hawkeye.\r\n\r\n----------------------------------------------------------------------------------\r\n### G) BUGS\r\n\r\nIf you encounter any problems/bugs, please check the wiki page:\r\nhttps://github.com/treangen/MetAMOS/wiki\r\nand the known issues pages:\r\nhttps://github.com/treangen/MetAMOS/issues?direction=desc&sort=created&state=open\r\nto see if it has already been documented.\r\n\r\nIf not, please report the issue either using the contact information below or \r\nby submitting a new issue online. Please include information on your run,\r\nany output produced by runPipeline, as well as the pipeline.* files and the \r\nLog/<LAST_STEP> file (if not too large).\r\n\r\n### H) CONTACT\r\n\r\nWho to contact to report bugs, forward complaints, feature requests:\r\n\r\nTodd Treangen: treangen@gmail.com\r\nSergey Koren: sergek@umd.edu\r\n\r\n----------------------------------------------------------------------------------\r\n### I) CITE\r\n\r\nTreangen TJ*, Koren S*, Sommer DD, Liu B, Astrovskaya I, Ondov B,\r\nDarling AE, Phillippy AM, Pop M.  MetAMOS: a modular and open source\r\nmetagenomic assembly and analysis pipeline. Genome Biol. 2013 Jan\r\n15;14(1):R2. PMID: 23320958.\r\n\r\nurl: http://genomebiology.com/content/pdf/gb-2013-14-1-r2.pdf\r\n\r\n*Indicates both authors contributed equally to this work","google":"UA-42944922-1","note":"Don't delete this file! It's used internally to help with page regeneration."}